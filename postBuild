#!/bin/bash
set -ex

#set up conda environment not needed

#change directory to the external folder
#check external folder, create it if not exist
if [ ! -d "external" ]; then
  mkdir external
fi
cd external

sPath_external=$(pwd)

#check whether the folder DGGRID exists or not, if exist, delete it
if [ -d "DGGRID" ]; then
  rm -rf DGGRID
fi
#clone a git repo to the external folder
sDggrid_url='https://github.com/sahrk/DGGRID.git'
git clone $sDggrid_url
#change directory to the DGGRID folder  
cd DGGRID                         # enter the cloned repo
mkdir build                          # Make a directory to compile into
cd build                             # Switch into build directory
cmake -DCMAKE_BUILD_TYPE=Release ..  # Prepare to compile
make                                 # Build code.
#make install                         # Optionally install on your machine
# Copy the dggrid binary to /home/jovyan/.
cp src/apps/dggrid/dggrid /home/jovyan/
sFolder_bin=src/apps/dggrid
cd $sFolder_bin
./dggrid -v
./dggrid -h
echo "dggrid model is compiled successfully!"

#compile hexwatershed model

#check whether the folder DGGRID exists or not, if exist, delete it
if [ -d "hexwatershed" ]; then
  rm -rf hexwatershed
fi
#clone a git repo to the external folder
sHexwatershed_url='https://github.com/changliao1025/hexwatershed.git'
git clone $sHexwatershed_url
#change directory to the DGGRID folder  
cd hexwatershed                         # enter the cloned repo
mkdir build                          # Make a directory to compile into
cd build                             # Switch into build directory
cmake -DCMAKE_BUILD_TYPE=Release ..  # Prepare to compile
make                                 # Build code.
#make install                         # Optionally install on your machine
# Copy the dggrid binary to /home/jovyan/.
cp hexwatershed /home/jovyan/

echo "Hexwatershed model is compiled successfully!"